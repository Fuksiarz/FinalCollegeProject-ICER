create database sklep;

use sklep;

SET SQL_SAFE_UPDATES = 0;

CREATE TABLE Users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL
);
INSERT INTO Users (username, password)
VALUES ('root', '$2b$12$8JnOBy0M5Edogzihz79MsOUzPQVLlWtYBnf3X9KQSaQx825MqFbsu');

-- tworzenie tabeli Produkty
CREATE TABLE Produkty (
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    nazwa VARCHAR(100) NULL,
    cena DECIMAL(8,2) NULL,
    kalorie INT NULL,
    tluszcze DECIMAL(4,2) NULL,
    weglowodany DECIMAL(4,2) NULL,
    bialko DECIMAL(4,2) NULL,
    kategoria VARCHAR(50) NULL,
    podstawowy TINYINT(1) NULL DEFAULT 0
);


CREATE TABLE Icer (
    id INT AUTO_INCREMENT PRIMARY KEY,
    UserID INT,
    produktID INT,
    ilosc INT,
    trzecia_wartosc TINYINT CHECK (trzecia_wartosc >= 0 AND trzecia_wartosc <= 4),
    data_waznosci DATE,
    data_otwarcia DATE,
    data_dodania TIMESTAMP,
    default_photo TINYINT(1) DEFAULT 1,
    powiadomienie TINYINT,
    FOREIGN KEY (UserID) REFERENCES Users (id),
    FOREIGN KEY (produktID) REFERENCES Produkty (id)
);



CREATE TABLE Photos (
  id INT PRIMARY KEY AUTO_INCREMENT,
  produktID INT,
  lokalizacja VARCHAR(255),
  FOREIGN KEY (produktID) REFERENCES Produkty (id)
);


CREATE TABLE UserPhotos (
  id INT PRIMARY KEY AUTO_INCREMENT,
  produktID INT,
  userID INT,
  lokalizacja VARCHAR(255),
  FOREIGN KEY (produktID) REFERENCES Produkty (id),
  FOREIGN KEY (userID) REFERENCES Users (id)
);



CREATE TABLE preferencje_uzytkownikow (
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    UserID INT NOT NULL,
    wielkosc_lodowki VARCHAR(255) NOT NULL,
    wielkosc_strony_produktu VARCHAR(255) NOT NULL,
    widocznosc_informacji_o_produkcie BOOLEAN NOT NULL,
    podstawowe_profilowe TINYINT(1) NOT NULL DEFAULT 0,
    lokalizacja VARCHAR(255),
    FOREIGN KEY (UserID) REFERENCES Users(id)
);



create table Shopping(
id INT AUTO_INCREMENT PRIMARY KEY,
UserID INT,
produktID INT,
in_cart TINYINT(0) DEFAULT 0),
ilosc INT;


DELIMITER //
CREATE PROCEDURE ModifyProductQuantity(IN p_icerID INT, IN p_userID INT, IN p_action ENUM('add', 'subtract', 'zero', 'remove'))
BEGIN
    DECLARE current_quantity INT;

    -- Pobieranie aktualnej ilości produktu dla danego wpisu (bazując na ID z tabeli Icer)
    SELECT ilosc INTO current_quantity FROM Icer WHERE id = p_icerID AND UserID = p_userID;

    -- Zaktualizowanie ilości w zależności od wybranej akcji
    IF p_action = 'add' THEN
        SET current_quantity = current_quantity + 1;
    ELSEIF p_action = 'subtract' AND current_quantity > 0 THEN
        SET current_quantity = current_quantity - 1;
    ELSEIF p_action = 'zero' THEN
        SET current_quantity = 0;
    ELSEIF p_action = 'remove' THEN
        DELETE FROM Icer WHERE id = p_icerID AND UserID = p_userID;
    END IF;

    -- Aktualizacja ilości produktu dla danego wpisu w tabeli Icer
    UPDATE Icer SET ilosc = current_quantity WHERE id = p_icerID AND UserID = p_userID;
END //
DELIMITER ;






DELIMITER //
CREATE PROCEDURE UpdateTrzeciaWartosc()
BEGIN
    -- Flagowanie produktów, które już wygasły
    UPDATE Icer
    SET trzecia_wartosc = 0
    WHERE DATE(data_waznosci) < DATE(NOW());

    -- Flagowanie produktów z 1 dniem do końca ważności
    UPDATE Icer
    SET trzecia_wartosc = 1
    WHERE DATE(data_waznosci) = DATE(NOW());

    -- Flagowanie produktów z 3 dniami do końca ważności
    UPDATE Icer
    SET trzecia_wartosc = 2
    WHERE DATE(data_waznosci) BETWEEN DATE(NOW()) AND DATE(NOW() + INTERVAL 3 DAY);

    -- Flagowanie produktów z pomiędzy 3 a 7 dni do końca ważności
    UPDATE Icer
    SET trzecia_wartosc = 3
    WHERE DATE(data_waznosci) > DATE(NOW() + INTERVAL 3 DAY) AND DATE(data_waznosci) <= DATE(NOW() + INTERVAL 7 DAY);

    -- Flagowanie produktów z ponad 7 dni do końca ważności ale mniej niż miesiąc
    UPDATE Icer
    SET trzecia_wartosc = 4
    WHERE DATE(data_waznosci) > DATE(NOW() + INTERVAL 7 DAY) ;
END //
DELIMITER ;



DELIMITER //

CREATE PROCEDURE Updatenotification()
BEGIN
    -- Sprawdzenie, czy procedura została wykonana już dzisiaj
    DECLARE last_exec_date DATE;
    SELECT DATE(exec_time) INTO last_exec_date FROM information_schema.events WHERE event_name = 'daily_notification_event';
    IF last_exec_date = CURDATE() THEN
        -- Jeśli procedura została już wykonana dzisiaj, zakończ jej wykonanie
        LEAVE Updatenotification;
    END IF;

    -- Ustawienie powiadomienia na 1, gdy trzecia_wartosc jest mniejsza lub równa 2 oraz ilość produktu wynosi 0
    UPDATE Icer
    SET powiadomienie = 1
    WHERE trzecia_wartosc <= 2 OR ilosc = 0;
END //

DELIMITER ;


DELIMITER //








# szybkie tworzenie bazy danych

CREATE PROCEDURE CreateAllTablesAndProcedures()
BEGIN
    -- Wyłączenie bezpiecznego trybu aktualizacji SQL
    SET SQL_SAFE_UPDATES = 0;

    -- Tworzenie tabeli Users
    CREATE TABLE IF NOT EXISTS Users (
        id INT AUTO_INCREMENT PRIMARY KEY,
        username VARCHAR(255) NOT NULL,
        password VARCHAR(255) NOT NULL
    );

    -- Wstawianie rekordu do tabeli Users
    INSERT IGNORE INTO Users (username, password)
    VALUES ('root', '$2b$12$8JnOBy0M5Edogzihz79MsOUzPQVLlWtYBnf3X9KQSaQx825MqFbsu');

    -- Tworzenie tabeli Produkty
    CREATE TABLE IF NOT EXISTS Produkty (
        id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
        nazwa VARCHAR(100) NULL,
        cena DECIMAL(8,2) NULL,
        kalorie INT NULL,
        tluszcze DECIMAL(4,2) NULL,
        weglowodany DECIMAL(4,2) NULL,
        bialko DECIMAL(4,2) NULL,
        kategoria VARCHAR(50) NULL,
        podstawowy TINYINT(1) NULL DEFAULT 0
    );

    -- Tworzenie tabeli Icer
    CREATE TABLE IF NOT EXISTS Icer (
        id INT AUTO_INCREMENT PRIMARY KEY,
        UserID INT,
        produktID INT,
        ilosc INT,
        trzecia_wartosc TINYINT CHECK (trzecia_wartosc >= 0 AND trzecia_wartosc <= 4),
        data_waznosci DATE,
        data_otwarcia DATE,
        data_dodania TIMESTAMP,
        default_photo TINYINT(1) DEFAULT 1,
        powiadomienie TINYINT,
        FOREIGN KEY (UserID) REFERENCES Users (id),
        FOREIGN KEY (produktID) REFERENCES Produkty (id)
    );

    -- Tworzenie tabeli Photos
    CREATE TABLE IF NOT EXISTS Photos (
      id INT PRIMARY KEY AUTO_INCREMENT,
      produktID INT,
      lokalizacja VARCHAR(255),
      FOREIGN KEY (produktID) REFERENCES Produkty (id)
    );

    -- Tworzenie tabeli UserPhotos
    CREATE TABLE IF NOT EXISTS UserPhotos (
      id INT PRIMARY KEY AUTO_INCREMENT,
      produktID INT,
      userID INT,
      lokalizacja VARCHAR(255),
      FOREIGN KEY (produktID) REFERENCES Produkty (id),
      FOREIGN KEY (userID) REFERENCES Users (id)
    );

    -- Tworzenie tabeli preferencje_uzytkownikow
    CREATE TABLE IF NOT EXISTS preferencje_uzytkownikow (
        id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
        UserID INT NOT NULL,
        wielkosc_lodowki VARCHAR(255) NOT NULL,
        wielkosc_strony_produktu VARCHAR(255) NOT NULL,
        widocznosc_informacji_o_produkcie BOOLEAN NOT NULL,
        podstawowe_profilowe TINYINT(1) NOT NULL DEFAULT 0,
        lokalizacja VARCHAR(255),
        FOREIGN KEY (UserID) REFERENCES Users(id)
    );

    -- Tworzenie tabeli Shopping
    CREATE TABLE IF NOT EXISTS Shopping(
    id INT AUTO_INCREMENT PRIMARY KEY,
    UserID INT,
    produktID INT,
    in_cart TINYINT(0) DEFAULT 0,
    ilosc INT
    );

    -- Tworzenie procedury ModifyProductQuantity
    CREATE PROCEDURE ModifyProductQuantity(IN p_icerID INT, IN p_userID INT, IN p_action ENUM('add', 'subtract', 'zero', 'remove'))
    BEGIN
        DECLARE current_quantity INT;

        -- Pobieranie aktualnej ilości produktu dla danego wpisu (bazując na ID z tabeli Icer)
        SELECT ilosc INTO current_quantity FROM Icer WHERE id = p_icerID AND UserID = p_userID;

        -- Zaktualizowanie ilości w zależności od wybranej akcji
        IF p_action = 'add' THEN
            SET current_quantity = current_quantity + 1;
        ELSEIF p_action = 'subtract' AND current_quantity > 0 THEN
            SET current_quantity = current_quantity - 1;
        ELSEIF p_action = 'zero' THEN
            SET current_quantity = 0;
        ELSEIF p_action = 'remove' THEN
            DELETE FROM Icer WHERE id = p_icerID AND UserID = p_userID;
        END IF;

        -- Aktualizacja ilości produktu dla danego wpisu w tabeli Icer
        UPDATE Icer SET ilosc = current_quantity WHERE id = p_icerID AND UserID = p_userID;
    END //

    -- Tworzenie procedury UpdateTrzeciaWartosc
    CREATE PROCEDURE UpdateTrzeciaWartosc()
    BEGIN
        -- Flagowanie produktów, które już wygasły
        UPDATE Icer
        SET trzecia_wartosc = 0
        WHERE DATE(data_waznosci) < DATE(NOW());

        -- Flagowanie produktów z 1 dniem do końca ważności
        UPDATE Icer
        SET trzecia_wartosc = 1
        WHERE DATE(data_waznosci) = DATE(NOW());

        -- Flagowanie produktów z 3 dniami do końca ważności
        UPDATE Icer
        SET trzecia_wartosc = 2
        WHERE DATE(data_waznosci) BETWEEN DATE(NOW()) AND DATE(NOW() + INTERVAL 3 DAY);

        -- Flagowanie produktów z pomiędzy 3 a 7 dni do końca ważności
        UPDATE Icer
        SET trzecia_wartosc = 3
        WHERE DATE(data_waznosci) > DATE(NOW() + INTERVAL 3 DAY) AND DATE(data_waznosci) <= DATE(NOW() + INTERVAL 7 DAY);

        -- Flagowanie produktów z ponad 7 dni do końca ważności ale mniej niż miesiąc
        UPDATE Icer
        SET trzecia_wartosc = 4
        WHERE DATE(data_waznosci) > DATE(NOW() + INTERVAL 7 DAY);
    END //

    -- Tworzenie procedury Updatenotification
    CREATE PROCEDURE Updatenotification()
    BEGIN
        -- Ustawienie powiadomienia na 1, gdy trzecia_wartosc jest mniejsza lub równa 2 oraz ilość produktu wynosi 0
        UPDATE Icer
        SET powiadomienie = 1
        WHERE trzecia_wartosc <= 2 OR ilosc = 0;
    END //

    -- Tworzenie eventu daily_notification_event
    CREATE EVENT IF NOT EXISTS daily_notification_event
    ON SCHEDULE EVERY 1 DAY
    DO
    BEGIN
        CALL Updatenotification();
        CALL

-- Wywołanie procedury tworzącej tabele i procedury
CALL CreateAllTablesAndProcedures

